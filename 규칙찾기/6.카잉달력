[문제]
최근에 ICPC 탐사대는 남아메리카의 잉카 제국이 놀라운 문명을 지닌 카잉 제국을 토대로 하여 세워졌다는 사실을 발견했다. 
카잉 제국의 백성들은 특이한 달력을 사용한 것으로 알려져 있다. 
그들은 M 과 N 보다 작거나 같은 두 개의 자연수 x, y를 가지고 각 년도를 <x:y>와 같은 형식으로 표현하였다. 
그들은 이 세상의 시초에 해당하는 첫 번째 해를 <1:1>로 표현하고, 두 번째 해를 <2:2>로 표현하였다.
<x:y>의 다음 해를 표현한 것을 <x':y'>이라고 하자. 
만일 x < M 이면 x' = x + 1이고, 그렇지 않으면 x' = 1이다. 같은 방식으로 만일 y < N이면 y' = y + 1이고, 그렇지 않으면 y' = 1이다. 
<M:N>은 그들 달력의 마지막 해로서, 이 해에 세상의 종말이 도래한다는 예언이 전해 온다. 
예를 들어, M = 10 이고 N = 12라고 하자. 첫 번째 해는 <1:1>로 표현되고, 11 번째 해는 <1:11>로 표현된다.
<3:1>은 13 번째 해를 나타내고, <10:12>는 마지막인 60 번째 해를 나타낸다. 
네 개의 정수 M, N, x 와 y가 주어질 때, <M:N>이 카잉 달력의 마지막 해라고 하면 <x:y>는 몇 번째 해를 나타내는 지를 구하는 프로그램을 작성하라. 
출력은 표준 출력을 사용한다. 각 테스트 데이터에 대해, 정수 k를 한 줄에 출력한다. 여기서 k는 <x:y>가 k번째 해를 나타내는 것을 의미한다. 
만일 <x:y>에 의해 표현되는 해가 없다면, 즉, <x:y>가 유효하지 않은 표현이면, -1을 출력한다.

[코딩]
import java.util.Scanner;

public class Main {
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		int T = scn.nextInt();
		int M, N, x, y;
		for (int i = 0; T > i; i++) {
			M = scn.nextInt();
			N = scn.nextInt();
			x = scn.nextInt();
			y = scn.nextInt();
			if (M > N) {
				int Mn = M;
				int xn = x;
				x = y;
				y = xn;
				M = N;
				N = Mn;
			}
			System.out.println(cal(M, N, x, y));
		}
		scn.close();
	}

	public static int cal(int M, int N, int x, int y) {
		int cnt = -1;
		int yn; 
		for (int i = 1; true; i++) {
			yn = x - (Math.abs(N - M) * (i - 1));
			if (yn <= 0) {
				yn += (Math.abs(yn / N) + 1) * N;
			}
			if (yn == y) {
				cnt = (i - 1) * M + x;
				return cnt;
			}
			if((M * i) % N == 0){
				return cnt;
			}
		}
	}
}

[결과]
3
10 12 3 9
33
10 12 7 2
-1
13 11 5 6
83
